{"version":3,"sources":["utils/numberHelper.js","Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["convertNumToString","num","Die","face","rolling","className","RollDice","DIE_FACES","useState","dice1","setDice1","dice2","setDice2","isRolling","setIsRolling","getRandomElement","Math","floor","random","length","onClick","setTimeout","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAAMA,G,MAAqB,SAAAC,GACzB,OAAQA,GACN,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,MACT,QACE,OAAOA,KCFEC,EATH,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACnB,OACE,uBACEC,UAAS,0BAAqBL,EAAmBG,GAAxC,YAAiDC,GACxD,cC6BOE,G,MAjCE,WACf,IAAMC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GADb,EAGKC,mBAAS,GAHd,mBAGdC,EAHc,KAGPC,EAHO,OAIKF,mBAAS,GAJd,mBAIdG,EAJc,KAIPC,EAJO,OAKaJ,oBAAS,GALtB,mBAKdK,EALc,KAKHC,EALG,KAOfC,EAAmB,kBACvBR,EAAUS,KAAKC,MAAMD,KAAKE,SAAWX,EAAUY,UAWjD,OACE,yBAAKd,UAAU,YACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAKF,KAAMM,EAAOL,QAASS,IAC3B,kBAAC,EAAD,CAAKV,KAAMQ,EAAOP,QAASS,KAG7B,4BAAQO,QAhBC,WACXN,GAAa,GACbJ,EAASK,KACTH,EAASG,KAGTM,YAAW,kBAAMP,GAAa,KAAQ,MAUbQ,SAAUT,GAC9BA,EAAY,aAAe,gBCnBrBU,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCKcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e4383ab.chunk.js","sourcesContent":["const convertNumToString = num => {\n  switch (num) {\n    case 1:\n      return 'one';\n    case 2:\n      return 'two';\n    case 3:\n      return 'three';\n    case 4:\n      return 'four';\n    case 5:\n      return 'five';\n    case 6:\n      return 'six';\n    default:\n      return num;\n  }\n};\nexport { convertNumToString };\n","import React from 'react';\nimport './Die.css';\nimport { convertNumToString } from './utils/numberHelper';\n\nconst Die = ({ face, rolling }) => {\n  return (\n    <i\n      className={`Die fas fa-dice-${convertNumToString(face)} ${rolling &&\n        'rolling'}`}\n    ></i>\n  );\n};\n\nexport default Die;\n","import React, { useState } from 'react';\nimport Die from './Die';\nimport './RollDice.css';\n\nconst RollDice = () => {\n  const DIE_FACES = [1, 2, 3, 4, 5, 6];\n\n  const [dice1, setDice1] = useState(1);\n  const [dice2, setDice2] = useState(1);\n  const [isRolling, setIsRolling] = useState(false);\n\n  const getRandomElement = () =>\n    DIE_FACES[Math.floor(Math.random() * DIE_FACES.length)];\n\n  const roll = () => {\n    setIsRolling(true);\n    setDice1(getRandomElement());\n    setDice2(getRandomElement());\n    // wait one second, then set rolling to false\n\n    setTimeout(() => setIsRolling(false), 1000);\n  };\n\n  return (\n    <div className='RollDice'>\n      <div className='RollDice-container'>\n        <Die face={dice1} rolling={isRolling} />\n        <Die face={dice2} rolling={isRolling} />\n      </div>\n\n      <button onClick={roll} disabled={isRolling}>\n        {isRolling ? 'Rolling...' : 'Roll Dice'}\n      </button>\n    </div>\n  );\n};\n\nexport default RollDice;\n","import React from 'react';\nimport './App.css';\nimport RollDice from './RollDice';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}